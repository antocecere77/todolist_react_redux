{"version":3,"sources":["components/header.js","actions/index.js","containers/addnew.js","components/addTodo.js","components/todo.js","containers/mytodolist.js","components/todolist.js","App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["header","react_default","a","createElement","className","connect","addTodo","todo","type","_ref","todoInput","onKeyUp","evt","keyCode","value","ref","node","onClick","todoItem","id","completed","MyTodoList","state","todos","Object","toConsumableArray","removeTodo","i","myConnect","map","todo_todo","key","App","addnew","mytodolist","Component","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","concat","slice","objectSpread","__REDUX_DEVTOOLS_EXTENSION__","subscribe","console","log","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1014f87.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function header() {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1>TODO LIST</h1>\r\n        </header>\r\n    )\r\n}","export const addTodo = (todo) => {\r\n   \r\n  return  {\r\n       type: 'ADD_TODO',\r\n       todo\r\n\r\n   };\r\n};\r\n\r\nexport const  removeTodo = (i) => {\r\n \r\n return {\r\n      type: 'REMOVE_TODO',\r\n      id : i\r\n\r\n  };\r\n};","import {connect } from 'react-redux';\r\n\r\nimport addTodoComponent from '../components/addTodo';\r\nimport { addTodo } from '../actions/index';\r\n\r\n/*\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNew: (todo) => {\r\n            dispatch(addTodo(todo))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(addTodoComponent)\r\n*/\r\n\r\n\r\nexport default connect(null, {addTodo} )(addTodoComponent);","import React from 'react';\r\n\r\n\r\nexport default function addTodoComponent({addTodo}){\r\n\r\n     let todoInput;\r\n    return(\r\n        <div className=\"addtodo\">\r\n            <input \r\n             onKeyUp = {\r\n                 (evt) =>{\r\n                    if( +evt.keyCode === 13){\r\n                        addTodo( todoInput.value );\r\n                        todoInput.value = '';\r\n                    }\r\n                 }\r\n             }\r\n            ref ={ node =>  {todoInput = node} }  />\r\n            \r\n            <button onClick = {\r\n                () => {\r\n                    addTodo( todoInput.value );\r\n                    todoInput.value = '';\r\n                }\r\n                }\r\n                >Add</button>\r\n        </div>\r\n)\r\n}","import React from 'react';\r\nexport default function todo({todoItem, onClick, id}){\r\n\r\n    //dispatch(removeTodo(i))\r\nreturn (\r\n    <li  className={todoItem.completed? 'completed':''} onClick ={() => onClick(id)}>\r\n    <span className={todoItem.completed? 'completed':'uncomplete'}></span>\r\n    {todoItem.todo} \r\n    </li>\r\n    ) ;\r\n}","import {connect } from 'react-redux';\r\nimport TodoList from '../components/todolist';\r\nimport {removeTodo} from '../actions/index'\r\n\r\n  const mapStateToProps =  (state) => {\r\n    return {\r\n        todos: [...state.todos]\r\n    }\r\n}\r\nconst myConnect = connect(mapStateToProps, {removeTodo});\r\n\r\nconst MyTodoList = myConnect(TodoList);\r\n\r\nexport default MyTodoList;","import React from 'react';\r\nimport Todo from './todo'\r\nexport default function todoList({todos, removeTodo}){\r\n\r\nreturn (\r\n<ul>\r\n    {\r\n        todos.map( (todo,i) => <Todo id ={i} key={i} onClick = {removeTodo} todoItem ={todo}/>)\r\n    }\r\n</ul>\r\n\r\n);\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport AddNewTodo from './containers/addnew'\nimport MyTodoList from './containers/mytodolist';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n       <Header/>\n       <div className=\"container\">\n       <AddNewTodo/>\n        <MyTodoList/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport storeReducer from './reducers/index';\nimport {Provider} from 'react-redux';\n\n\nlet storeTodos={\n    \n    todos:[\n\n    { \n      id:0, \n      todo: 'Fare la spesa',\n      completed: false\n      },\n      {\n        id:1,\n        todo: 'Fare i compiti', \n        completed: true\n      },\n      {\n        id:2, \n        todo: 'Imparare React', \n        completed: false\n      }\n\n  ]\n};\n  \n  \n  const store = createStore(storeReducer, { todos: [...storeTodos.todos] },\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\n  store.subscribe(()=>{console.log(store.getState())})\n\nReactDOM.render(<Provider store={store}><App/></Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"," export default  function storeReducer(state = {}, action) {\r\n    switch(action.type){\r\n      case 'ADD_TODO' :\r\n      return {\r\n         todos : [\r\n           {\r\n            'id': state.todos.length, \r\n            'todo': action.todo,\r\n            'completed': false\r\n           },\r\n           ...state.todos\r\n         ]\r\n      }\r\n      case 'REMOVE_TODO' :\r\n      return {\r\n       todos : [\r\n         ...state.todos.slice(0, action.id), \r\n         ...state.todos.slice( action.id + 1)\r\n       ]\r\n    }\r\n      default: \r\n      return  {...state};\r\n \r\n    }\r\n   \r\n  }"],"sourceRoot":""}